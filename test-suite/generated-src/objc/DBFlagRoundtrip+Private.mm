// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#import "DBFlagRoundtrip+Private.h"
#import "DBFlagRoundtrip.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBFlagRoundtrip ()

@property (nonatomic, readonly) ::djinni::DbxCppWrapperCache<::FlagRoundtrip>::Handle cppRef;

- (id)initWithCpp:(const std::shared_ptr<::FlagRoundtrip>&)cppRef;

@end

@implementation DBFlagRoundtrip

- (id)initWithCpp:(const std::shared_ptr<::FlagRoundtrip>&)cppRef
{
    if (self = [super init]) {
        _cppRef.assign(cppRef);
    }
    return self;
}

+ (DBAccessFlags)roundtripAccess:(DBAccessFlags)flag {
    try {
        auto r = ::FlagRoundtrip::roundtrip_access(::djinni::Enum<::access_flags, DBAccessFlags>::toCpp(flag));
        return ::djinni::Enum<::access_flags, DBAccessFlags>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (DBEmptyFlags)roundtripEmpty:(DBEmptyFlags)flag {
    try {
        auto r = ::FlagRoundtrip::roundtrip_empty(::djinni::Enum<::empty_flags, DBEmptyFlags>::toCpp(flag));
        return ::djinni::Enum<::empty_flags, DBEmptyFlags>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NSNumber *)roundtripAccessBoxed:(nullable NSNumber *)flag {
    try {
        auto r = ::FlagRoundtrip::roundtrip_access_boxed(::djinni::Optional<std::experimental::optional, ::djinni::Enum<::access_flags, DBAccessFlags>>::toCpp(flag));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::access_flags, DBAccessFlags>>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NSNumber *)roundtripEmptyBoxed:(nullable NSNumber *)flag {
    try {
        auto r = ::FlagRoundtrip::roundtrip_empty_boxed(::djinni::Optional<std::experimental::optional, ::djinni::Enum<::empty_flags, DBEmptyFlags>>::toCpp(flag));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::empty_flags, DBEmptyFlags>>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end

namespace djinni_generated {

auto FlagRoundtrip::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc.cppRef.get();
}

auto FlagRoundtrip::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::DbxCppWrapperCache<::FlagRoundtrip>::getInstance()->get(cpp, [] (const CppType& p) {
        return [[DBFlagRoundtrip alloc] initWithCpp:p];
    });
}

}  // namespace djinni_generated
